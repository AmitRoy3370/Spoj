
import java.util.Arrays;
import java.util.Scanner;

public class ABA12C_Buying_Apples {

    static int testCases, n, k;

    static int a[];

    static Scanner in = new Scanner(System.in);

    static int INF = 100000;

    static void solve() {

        int ans = solve(k, n, a);

        System.out.println(ans);

    }

    static int solve(int K, int N, int[] prices) {

        int[][] dp = new int[K + 1][N + 1];
        Arrays.fill(dp[0], INF);
        dp[0][0] = 0;

        for (int i = 1; i <= K; i++) {

            for (int j = 1; j <= N; j++) {

                int minres = INF;

                for (int kth = 1; kth <= j; kth++) {

                    if (prices[kth - 1] != -1) {

                        int tres = dp[i - 1][j - kth] + prices[kth - 1];

                        if (tres < minres) {

                            minres = tres;

                        }

                    }

                }

                dp[i][j] = minres;

            }

        }

        return dp[K][N] == INF ? -1 : dp[K][N];
    }

    public static void main(String[] args) {

        testCases = in.nextInt();

        for (int t = 0; t < testCases; ++t) {

            k = in.nextInt();
            n = in.nextInt();

            a = new int[n];

            for (int i = 0; i < n; ++i) {

                a[i] = in.nextInt();

            }

            solve();

        }

    }

    static class Bag implements Comparable<Bag> {

        int weight, value;

        public Bag(int weight, int value) {
            this.weight = weight;
            this.value = value;
        }

        @Override
        public int compareTo(Bag o) {
            //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody

            if ((this.value / this.weight) > (o.weight / o.weight)) {

                return 1;

            } else if ((this.value / this.weight) < (o.value / o.weight)) {

                return -1;

            }

            return 0;

        }

    }

}
/*

1
5 5
1 2 3 4 5

 */

/*

2
3 5
-1 -1 4 5 -1
5 5
1 2 3 4 5

*/
